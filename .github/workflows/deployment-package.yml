name: Alternative Deployment

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  create-deployment-package:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm install
        npm run build
        
    - name: Verify build output
      run: |
        echo "📁 Build directory contents:"
        ls -la dist/
        echo "📁 Project root contents:"
        ls -la
        
    - name: Create comprehensive deployment package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy all necessary files
        cp package.json deployment-package/
        cp package-lock.json deployment-package/
        cp Dockerfile deployment-package/
        cp docker-compose.yml deployment-package/
        cp .env.example deployment-package/
        cp README.md deployment-package/
        
        # Copy build output
        cp -r dist/ deployment-package/
        
        # Create tar archive
        cd deployment-package
        tar -czf ../discord-bot-deployment.tar.gz .
        cd ..
        
        echo "✅ Deployment package created"
        echo "📦 Package contents:"
        tar -tzf discord-bot-deployment.tar.gz
        
        echo "📊 Package size:"
        ls -lh discord-bot-deployment.tar.gz
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-package
        path: discord-bot-deployment.tar.gz
        retention-days: 30
        
    - name: Create GitHub Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          🚀 **Automated Release**
          
          This release includes:
          - ✅ TypeScript build artifacts
          - ✅ Docker configuration
          - ✅ Production-ready deployment package
          
          Download the `discord-bot-deployment.tar.gz` for deployment.
        draft: false
        prerelease: false
